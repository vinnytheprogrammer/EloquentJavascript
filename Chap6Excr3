class Group {
  // Your code here.
  constructor(){
  	this.elements = [];
    this.size = this.elements.length;
  }
  
  add(x){
    if(!this.elements.includes(x)){this.elements.push(x); this.size = this.elements.length;}
  }
  
  delete(x){
    if(this.elements.includes(x)){
      this.elements.splice( this.elements.indexOf(x), 1 );
      this.size = this.elements.length;
    }
  }
  
  has(x){
    return this.elements.includes(x);
  }
  
  static from(iterableObject){
    let grp = new Group();
    for(let i of iterableObject){
      grp.add(i);
    }
    return grp;
  }
  
}

// Your code here (and the code from the previous exercise)
class GroupIterator{
  constructor(group){
    this.current = 0;
    this.group = group;
  }
  
  next(){
  	if (this.current == this.group.size) return {done: true};
    let value = {current: this.current , value: this.group.elements[this.current]};
    this.current++;
    return {value : value , done: false};
  }
}

Group.prototype[Symbol.iterator] = function() {
  return new GroupIterator(this);
};

for (let i of Group.from(["a", "b","b", "c"])) {
  console.log(i);
}
// → a
// → b
// → c
